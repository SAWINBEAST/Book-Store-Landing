<?php
phphinfo();
$foo = true;
echo "Hello world";

//язык во многом похож на С-подобные языки. зддесь многое так же




echo ('<h1>yyy<h1>'.$foo.'hffhf'); //Конкотинация
echo ("<h1>yyy<h1> $foo hffhf");    //аналогично

//heredoc   -   как с одинарными ковычками
$str = <<<EOD
kjbdibevhifv
ecjenvjenjv
effkjvnejibvjiebvfejbfvijebvfe
EOD;

//nowdoc - то же самое, только как с двойными ковычками

//массив - как словарь dictionary 
//key => value
$rara = array = [
    "h"= 67,
    1 = "hdh"
];

print_r($rara);

//php преобразовывает "One" в 1 или True

$rara[] = "test";        // array{[h]= 67,[1]=test}

echo $rara["h"].<br>;


//в массиве действуют автоматические преобразования типов

var_dump($rara);


$rara[] = 56    // 2 = 56   //берёт первое свободное число. Ставит обязательно в конец

//unset - удалить объект        // не удаляет переменную, а стирает лишь её значение (делает её null)

//isset - преобразование по опр. логике //проверяет существование и возвращает булевое значение

$da = "jaj";
$net = &$da;


//Суперглобальные массивы   //уже встроены  

//область видимости
include "b.abc";

$a = 2;
global $a;

//Константы
define("FOO","hhhhshssj");


//операторы

//возведение в степень
$a**$b;

//деление минуса на минус выведет тоже минус

$a = ($b = 4) +5 //b=4 , a=9


//побитовые операторы такие же

//управление ошибками - @
$s = @("error 404");

//Операторы исполнения ``

//Конкотинация
$a = "f";
$b = $a."hello";

//if : .... else: .... endif;   //древняя форма


//foreach может перебирать через as как только value, так и key =>value

//continue - выход из конструкции

require // аналог include

//включает модуль только один раз. проверка идет перед
require_once 
include_once











?>